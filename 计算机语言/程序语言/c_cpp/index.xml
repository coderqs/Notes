<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C/C++ on 清松的笔记本</title><link>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/c_cpp/</link><description>Recent content in C/C++ on 清松的笔记本</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/c_cpp/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/c_cpp/errno%E9%94%99%E8%AF%AF%E7%A0%81%E8%AF%B4%E6%98%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/c_cpp/errno%E9%94%99%E8%AF%AF%E7%A0%81%E8%AF%B4%E6%98%8E/</guid><description>&amp;lt;markdown&amp;gt; # errno 错误码说明 关于 errno 的相关定义都在头文件 `/usr/include/asm/errno.h` 中，下面是从文件中拷出来方便查询 ```
#define EPERM 1 /* Operation not permitted */操作不允许 　#define ENOENT 2 /* No such file or directory */文件/路径不存在
　#define ESRCH 3 /* No such process */进程不存在
　#define EINTR 4 /* Interrupted system call */中断的系统调用
　#define EIO 5 /* I/O error */I/O错误
　#define ENXIO 6 /* No such device or address */设备/地址不存在
　#define E2BIG 7 /* Arg list too long */参数列表过长</description></item><item><title/><link>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/c_cpp/gnu%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%8D%A2%E5%90%8D%E8%A7%84%E5%88%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/c_cpp/gnu%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%8D%A2%E5%90%8D%E8%A7%84%E5%88%99/</guid><description>GNU C++ 编译器的换名规则 # 全局变量 # 不做任何修改
全局函数 # 以_Z开头，然后是函数名字符的个数，接着是函数名，最后是函数参数的别名。
类或命名空间中的变量或函数 # 以_ZN开头，然后是变量或函数所在名字空间或类名字的字符长度，然后接着的是真正的名字空间或类名，然后是变量或函数名的长度和变量或函数名，后面紧跟字母E，最后如果是函数的话则跟参数别名，如果是变量则什么都不用加。
构造函数和析构函数 # 以_ZN开头，然后是构造函数所在名字空间和类名字的字符长度，然后接着的是真正的名字空间或类名，然后构造函数接C1或者C2，析构函数接D1或者D2，然后加上字母E，最后接函数参数别名结束。
函数的参数 # 是基本类型时 # 参数类型 参数别名 void v wchar_t w bool b char c signed char a unsigned char h short s unsigned short t int i unsigned int j long l unsigned long m long long或__int64 x unsigned long long或unsigned __int64 y __int128 n unsigned __int128 o float f double d long double或__float80 e __float128 g 是类或结构体时 # 在类或者结构体名字前加上类或结构体名的字符长度</description></item></channel></rss>