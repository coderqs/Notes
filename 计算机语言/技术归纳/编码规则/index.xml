<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>清松的笔记本</title><link>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99/</link><description>Recent content on 清松的笔记本</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99/cpp%E6%B3%A8%E9%87%8A%E9%A3%8E%E6%A0%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99/cpp%E6%B3%A8%E9%87%8A%E9%A3%8E%E6%A0%BC/</guid><description>C++ 注释风格 # 个人比较认同的三种注释风格
doxygen 风格 # 指的是 doxygen 或者基于 doxygen 语法的一些变体的注释。
这种注释好处是可以直接使用 doxygen 的工具生成文档，但坏处就是太啰嗦，而且这种注释大家在修改代码的时候多数都懒得修改，容易造成注释与代码对不上的情况。
rustdoc 风格 # rustdoc 所推荐的注释风格，直接在 /// 型的注释里使用 markdown 语法写注释即可。
这种注释书写起来很方便，但需要了解 markdown 的语法，对经常使用 markdown 的人员来说非常直观。
简约风格 # 这种风格提倡在代码中使用良好的命名使代码具有自解释性，以此来适当的减少描述性的注释出现，避免造成代码的不连续。
这种注释对于命名的能力有着较高要求，毕竟在开发过程中能起一个准确又合适的名字不是一件简单的事情，但是这种风格的代码在看的时候很舒服的。
使用这种风格有以下几个注意点与建议：
规范、准确的命名。 区分使用代码注释 /**/ (只注释代码) 与说明注释 /// () 减少多行注释，允许的情况下与代码同行。 参考资料 # C++注释规范是什么？</description></item><item><title/><link>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99/cpp%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99/cpp%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/</guid><description>C++ 编码风格 # 这是基于 Google 发布的 C++ 编程风格指南整理的，每一项规则的详细的阐述可以参见 官方的原版指南或者 中文版。
注意：这份指南只是提供了一份通用的编程规范，当你的项目已有自己的约定则优先遵守项目的约定！
头文件 # 通常一个一个 .cc 对应一个 .h，但也有一些常见的例外，例如单元测试代码只有 .cc 文件和 main() 函数。
Self-contained 头文件 # 头文件，以 .h 结尾; 用于插入文本的文件，以 .inc 结尾; 模板或内联函数的定义不要放到 -inl.h 文件中; 不建议从 .h 中分离出 -inl.h 文件; #define 保护 # 所有头文件都应该使用 #define 来防止头文件被多重包含, 命名格式当是: &amp;lt;PROJECT&amp;gt;_&amp;lt;PATH&amp;gt;_&amp;lt;FILE&amp;gt;_H_（路径是从项目的源代码树的根路径开始）。
前置声明 # 尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。
尽量避免前置声明那些定义在其他项目中的实体; 函数：总是使用 #include; 类模板：优先使用 #include; 内联函数 # 不要内联超过 10 行的函数; 不要内联包含循环或 switch 语句的函数; 虚函数和递归函数不应该声明成内联; #include 的路径及顺序 # 避免使用特殊的快捷目录 .</description></item><item><title/><link>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coderqs.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/%E6%8A%80%E6%9C%AF%E5%BD%92%E7%BA%B3/%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid><description>工程目录结构 # 目前这份结构只考虑了 C/C++ 的工程
project_root |- 3rdparty |- builds(platforms) |- cmake |- bin |- lib |- include |- project_name |- module_1 |- module_2 |- config |- readme.md |- data |- test |- sample |- scripts |- doc readme.md: 自述文件。 3rdparty: 第三方库的源代码。以子项目(git submodule)的形式存在，如果没有则不需要这文件夹。 data: 存放测试数据，可以没有。 test: 存放单元测试代码，其内部层级结构与 src 一致。 sample: 存放示例代码。 doc: 存放文档（如果文档全上 wiki 这个是不是可以不要？）。 builds(platforms): 构建系统，里面根据不同平台再划分一级目录，分别存放对应的构建脚本(cmake、makefile 等)。 cmake: 存放 .cmake 文件，不使用 cmake 可以不要这个目录 project_name: 总源码目录，内部分模块组织。 每个模块放在同名的文件夹下，模块内部存放该模块的主要功能逻辑代码，但不可以出现模块嵌套的情况。 包含内部头文件时，要从 project_name 开拼写完整路径，防止头文件名称冲突，遵循 google c++ 编码规范。 config: 存放配置文件模板。 scripts: 存放脚本文件，如发布脚本。 include: 第三方库的头文件。 lib: 三/二方库的库文件。 bin: 工程的输出目录。</description></item></channel></rss>