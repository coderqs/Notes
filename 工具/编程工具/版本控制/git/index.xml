<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>清松的笔记本</title><link>https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/</link><description>Recent content on 清松的笔记本</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid><description>Git 创建远程仓库 # 本地远程仓库 # 创建目录 # 在本地要当做远程仓库的路径创建一个空目录（与你要本地仓库同名）并创建裸仓库
mkdir ~/Temp/git_server/Test/ git init--bare 关联仓库 # 本地仓库关联远程仓库
git remote add origin ~/Temp/git_server/Test/ 如果远程地址设置错了，可以使用以下命令重置
git remote set-url origin ~/Temp/git_server/NewTest/ 提交 # 提交到远程仓库
git push -u origin master #!/bin/sh # # An example hook script to prepare a packed repository for use over # dumb transports. # # To enable this hook, rename this file to "post-update". #exec git update-server-info # 添加以下三行即可 unset GIT_DIR cd .</description></item><item><title/><link>https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>Git 的常用命令 # 基础命令 # 本地 # 创建存储库 # git init repositories_name 状态查看 # git status 文件操作 # # 添加文件 git add filename # 删除文件 git rm filename # 移动或重命名 git mv filename_src filename_dst 提交文件 # git commit -m &amp;#34;提交内容的描述&amp;#34; 比较差异 # git diff filename 查看提交记录 # git log # 简版记录 git log --pretty=oneline 版本回退 # # 回退到上个版本 git reset --hard HEAD^ # 回退到上上个版本 git reset --hard HEAD^^ # 回退到上100个版本 git reset --hard HEAD~100 # 回退到指定版本 git reset --hard commit_id 查看执行命令的记录 # git reflog</description></item><item><title/><link>https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</guid><description>git 编译安装 # 准备 # 安装依赖 # yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel yum install -y gcc perl-ExtUtils-MakeMaker 下载源码 # git clone https://github.com/git/git.git 注：如果没有给 git 配置代理的话，建议直接下载压缩包会更快些。
编译 # 编译命令 # make prefix=/usr/local/git all make prefix=/usr/local/git install 这里提醒下，如果 git 的源码是从 windows 下拷过来的要注意下文件的可执行权限
创建软连接 # ln -s /usr/local/git/bin/git /usr/bin/git</description></item><item><title/><link>https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coderqs.github.io/%E5%B7%A5%E5%85%B7/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</guid><description>在 &amp;ldquo;科学上网&amp;rdquo; 后使用 git 克隆 github 上的项目速度还是很慢。后来发现 git clone 时并没有走 &amp;ldquo;科学上网&amp;rdquo; 的代理，需要在 git 中设置一下代理才会使用。
设置方法 # 查看 &amp;ldquo;科学上网&amp;rdquo; 开放的端口号与协议是什么，我的端口是 1080，协议是 socks。 打开 git bash 只代理 github git config --global http.https://github.com.proxy socks://127.0.0.1:1080 git config --global https.https://github.com.proxy socks://127.0.0.1:1080 全局代理 git config --global http.proxy socks://127.0.0.1:1080 git config --global https.proxy socks://127.0.0.1:1080 注：
如果 &amp;ldquo;科学上网&amp;rdquo; 使用的协议是 https，则需要将命令中参数 socks://127.0.0.1:1080 替换成 https://127.0.0.1:1080 socks5 与上同理 取消代理 # 取消 github 的代理 git config --global --unset http.</description></item></channel></rss>